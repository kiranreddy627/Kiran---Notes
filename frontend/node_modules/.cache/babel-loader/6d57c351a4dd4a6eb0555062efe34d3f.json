{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport noteService from './noteService';\nconst initialState = {\n  notes: [],\n  isSuccess: false,\n  isError: false,\n  isLoading: false,\n  message: ''\n}; // Get user's notes\n\nexport const getNotes = createAsyncThunk('notes/getNotes', async (_, thunkAPI) => {\n  try {\n    // @ts-ignore\n    const token = thunkAPI.getState().auth.user.token || '';\n    return await noteService.getNotes(token);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Create a note\n\nexport const createNote = createAsyncThunk('notes/createNote', async (formData, thunkAPI) => {\n  try {\n    // @ts-ignore\n    const token = thunkAPI.getState().auth.user.token || '';\n    return await noteService.createNote(formData, token);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Delete a note\n\nexport const deleteNote = createAsyncThunk('notes/deleteNote', async (id, thunkAPI) => {\n  try {\n    // @ts-ignore\n    const token = thunkAPI.getState().auth.user.token || '';\n    return await noteService.deleteNote(id, token);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const noteSlice = createSlice({\n  name: 'notes',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(getNotes.pending, state => {\n      state.isLoading = true;\n    }).addCase(getNotes.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.notes = action.payload;\n    }).addCase(getNotes.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(createNote.pending, state => {\n      state.isLoading = true;\n    }).addCase(createNote.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.notes.push(action.payload);\n    }).addCase(createNote.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(deleteNote.pending, state => {\n      state.isLoading = true;\n    }).addCase(deleteNote.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.notes = state.notes.filter(note => note._id !== action.payload.id);\n    }).addCase(deleteNote.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = noteSlice.actions;\nexport default noteSlice.reducer;","map":{"version":3,"sources":["C:/Users/kiran/Downloads/MERN-Notes-App-main/Kiran - Notes/frontend/src/features/notes/noteSlice.ts"],"names":["createSlice","createAsyncThunk","noteService","initialState","notes","isSuccess","isError","isLoading","message","getNotes","_","thunkAPI","token","getState","auth","user","err","response","data","toString","rejectWithValue","createNote","formData","deleteNote","id","noteSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","push","filter","note","_id","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport noteService from './noteService';\n\ntype initialStateType = {\n  notes: Note[];\n  isSuccess: boolean;\n  isError: boolean;\n  isLoading: boolean;\n  message: string;\n};\n\nconst initialState: initialStateType = {\n  notes: [] as Note[],\n  isSuccess: false,\n  isError: false,\n  isLoading: false,\n  message: '',\n};\n\n// Get user's notes\nexport const getNotes = createAsyncThunk(\n  'notes/getNotes',\n  async (_, thunkAPI) => {\n    try {\n      // @ts-ignore\n      const token = (thunkAPI.getState().auth.user.token as string) || '';\n      return await noteService.getNotes(token);\n    } catch (err: any) {\n      const message =\n        (err.response && err.response.data && err.response.data.message) ||\n        err.message ||\n        err.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\n// Create a note\nexport const createNote = createAsyncThunk(\n  'notes/createNote',\n  async (formData: NewNoteType, thunkAPI) => {\n    try {\n      // @ts-ignore\n      const token = (thunkAPI.getState().auth.user.token as string) || '';\n      return await noteService.createNote(formData, token);\n    } catch (err: any) {\n      const message =\n        (err.response && err.response.data && err.response.data.message) ||\n        err.message ||\n        err.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\n// Delete a note\nexport const deleteNote = createAsyncThunk(\n  'notes/deleteNote',\n  async (id: string, thunkAPI) => {\n    try {\n      // @ts-ignore\n      const token = (thunkAPI.getState().auth.user.token as string) || '';\n      return await noteService.deleteNote(id, token);\n    } catch (err: any) {\n      const message =\n        (err.response && err.response.data && err.response.data.message) ||\n        err.message ||\n        err.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\nexport const noteSlice = createSlice({\n  name: 'notes',\n  initialState,\n  reducers: {\n    reset: (state) => initialState,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getNotes.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(getNotes.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.isSuccess = true;\n        state.notes = action.payload as Note[];\n      })\n      .addCase(getNotes.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isError = true;\n        state.message = action.payload as string;\n      })\n      .addCase(createNote.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(createNote.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.isSuccess = true;\n        state.notes.push(action.payload as Note);\n      })\n      .addCase(createNote.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isError = true;\n        state.message = action.payload as string;\n      })\n      .addCase(deleteNote.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(deleteNote.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.isSuccess = true;\n        state.notes = state.notes.filter(\n          (note) => note._id !== (action.payload.id as string)\n        );\n      })\n      .addCase(deleteNote.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isError = true;\n        state.message = action.payload as string;\n      });\n  },\n});\n\nexport const { reset } = noteSlice.actions;\nexport default noteSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}