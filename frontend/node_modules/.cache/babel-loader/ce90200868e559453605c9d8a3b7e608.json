{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from './authService'; // Get user from local storage\n\nconst userFromLcalStorage = JSON.parse(localStorage.getItem('user')) || null;\nconst initialState = {\n  user: userFromLcalStorage ? userFromLcalStorage : null,\n  isSuccess: false,\n  isError: false,\n  isLoading: false,\n  message: ''\n}; // Register user\n\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  try {\n    return await authService.register(user);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Login user\n\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n  try {\n    return await authService.login(user);\n  } catch (err) {\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Logout User\n\nexport const logout = createAsyncThunk('auth/logout', async () => await authService.logout());\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(logout.fulfilled, state => {\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/kiran/Downloads/MERN-Notes-App-main/Kiran - Notes/frontend/src/features/auth/authSlice.ts"],"names":["createSlice","createAsyncThunk","authService","userFromLcalStorage","JSON","parse","localStorage","getItem","initialState","user","isSuccess","isError","isLoading","message","register","thunkAPI","err","response","data","toString","rejectWithValue","login","logout","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;AACA,MAAMC,mBAAgC,GACpCC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,KAAsD,IADxD;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAEN,mBAAmB,GAAGA,mBAAH,GAAyB,IAD/B;AAEnBO,EAAAA,SAAS,EAAE,KAFQ;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,SAAS,EAAE,KAJQ;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB,C,CAQA;;AACA,OAAO,MAAMC,QAAQ,GAAGb,gBAAgB,CACtC,eADsC,EAEtC,OAAOQ,IAAP,EAA2BM,QAA3B,KAAwC;AACtC,MAAI;AACF,WAAO,MAAMb,WAAW,CAACY,QAAZ,CAAqBL,IAArB,CAAb;AACD,GAFD,CAEE,OAAOO,GAAP,EAAiB;AACjB,UAAMH,OAAO,GACVG,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaC,IAA7B,IAAqCF,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBL,OAAxD,IACAG,GAAG,CAACH,OADJ,IAEAG,GAAG,CAACG,QAAJ,EAHF;AAIA,WAAOJ,QAAQ,CAACK,eAAT,CAAyBP,OAAzB,CAAP;AACD;AACF,CAZqC,CAAjC,C,CAeP;;AACA,OAAO,MAAMQ,KAAK,GAAGpB,gBAAgB,CACnC,YADmC,EAEnC,OAAOQ,IAAP,EAAwBM,QAAxB,KAAqC;AACnC,MAAI;AACF,WAAO,MAAMb,WAAW,CAACmB,KAAZ,CAAkBZ,IAAlB,CAAb;AACD,GAFD,CAEE,OAAOO,GAAP,EAAiB;AACjB,UAAMH,OAAO,GACVG,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaC,IAA7B,IAAqCF,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBL,OAAxD,IACAG,GAAG,CAACH,OADJ,IAEAG,GAAG,CAACG,QAAJ,EAHF;AAIA,WAAOJ,QAAQ,CAACK,eAAT,CAAyBP,OAAzB,CAAP;AACD;AACF,CAZkC,CAA9B,C,CAeP;;AACA,OAAO,MAAMS,MAAM,GAAGrB,gBAAgB,CACpC,aADoC,EAEpC,YAAY,MAAMC,WAAW,CAACoB,MAAZ,EAFkB,CAA/B;AAKP,OAAO,MAAMC,SAAS,GAAGvB,WAAW,CAAC;AACnCwB,EAAAA,IAAI,EAAE,MAD6B;AAEnChB,EAAAA,YAFmC;AAGnCiB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAW;AAChBA,MAAAA,KAAK,CAACf,SAAN,GAAkB,KAAlB;AACAe,MAAAA,KAAK,CAAChB,OAAN,GAAgB,KAAhB;AACAgB,MAAAA,KAAK,CAACjB,SAAN,GAAkB,KAAlB;AACAiB,MAAAA,KAAK,CAACd,OAAN,GAAgB,EAAhB;AACD;AANO,GAHyB;AAWnCe,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWhB,QAAQ,CAACiB,OADpB,EAC8BJ,KAAD,IAAW;AACpCA,MAAAA,KAAK,CAACf,SAAN,GAAkB,IAAlB;AACD,KAHH,EAIGkB,OAJH,CAIWhB,QAAQ,CAACkB,SAJpB,EAI+B,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC9CN,MAAAA,KAAK,CAACf,SAAN,GAAkB,KAAlB;AACAe,MAAAA,KAAK,CAACjB,SAAN,GAAkB,IAAlB;AACAiB,MAAAA,KAAK,CAAClB,IAAN,GAAawB,MAAM,CAACC,OAApB;AACD,KARH,EASGJ,OATH,CASWhB,QAAQ,CAACqB,QATpB,EAS8B,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAC7CN,MAAAA,KAAK,CAACf,SAAN,GAAkB,KAAlB;AACAe,MAAAA,KAAK,CAAChB,OAAN,GAAgB,IAAhB;AACAgB,MAAAA,KAAK,CAACd,OAAN,GAAgBoB,MAAM,CAACC,OAAvB;AACAP,MAAAA,KAAK,CAAClB,IAAN,GAAa,IAAb;AACD,KAdH,EAeGqB,OAfH,CAeWT,KAAK,CAACU,OAfjB,EAe2BJ,KAAD,IAAW;AACjCA,MAAAA,KAAK,CAACf,SAAN,GAAkB,IAAlB;AACD,KAjBH,EAkBGkB,OAlBH,CAkBWT,KAAK,CAACW,SAlBjB,EAkB4B,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC3CN,MAAAA,KAAK,CAACf,SAAN,GAAkB,KAAlB;AACAe,MAAAA,KAAK,CAACjB,SAAN,GAAkB,IAAlB;AACAiB,MAAAA,KAAK,CAAClB,IAAN,GAAawB,MAAM,CAACC,OAApB;AACD,KAtBH,EAuBGJ,OAvBH,CAuBWT,KAAK,CAACc,QAvBjB,EAuB2B,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAC1CN,MAAAA,KAAK,CAACf,SAAN,GAAkB,KAAlB;AACAe,MAAAA,KAAK,CAAChB,OAAN,GAAgB,IAAhB;AACAgB,MAAAA,KAAK,CAACd,OAAN,GAAgBoB,MAAM,CAACC,OAAvB;AACAP,MAAAA,KAAK,CAAClB,IAAN,GAAa,IAAb;AACD,KA5BH,EA6BGqB,OA7BH,CA6BWR,MAAM,CAACU,SA7BlB,EA6B8BL,KAAD,IAAW;AACpCA,MAAAA,KAAK,CAAClB,IAAN,GAAa,IAAb;AACD,KA/BH;AAgCD;AA5CkC,CAAD,CAA7B;AA+CP,OAAO,MAAM;AAAEiB,EAAAA;AAAF,IAAYH,SAAS,CAACa,OAA5B;AACP,eAAeb,SAAS,CAACc,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from './authService';\n\n// Get user from local storage\nconst userFromLcalStorage: User | null =\n  JSON.parse(localStorage.getItem('user') as string) || null;\n\nconst initialState = {\n  user: userFromLcalStorage ? userFromLcalStorage : null,\n  isSuccess: false,\n  isError: false,\n  isLoading: false,\n  message: '',\n};\n\n// Register user\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (user: userRegister, thunkAPI) => {\n    try {\n      return await authService.register(user);\n    } catch (err: any) {\n      const message =\n        (err.response && err.response.data && err.response.data.message) ||\n        err.message ||\n        err.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\n// Login user\nexport const login = createAsyncThunk(\n  'auth/login',\n  async (user: userLogin, thunkAPI) => {\n    try {\n      return await authService.login(user);\n    } catch (err: any) {\n      const message =\n        (err.response && err.response.data && err.response.data.message) ||\n        err.message ||\n        err.toString();\n      return thunkAPI.rejectWithValue(message);\n    }\n  }\n);\n\n// Logout User\nexport const logout = createAsyncThunk(\n  'auth/logout',\n  async () => await authService.logout()\n);\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: (state) => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = '';\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(register.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(register.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.isSuccess = true;\n        state.user = action.payload as User;\n      })\n      .addCase(register.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isError = true;\n        state.message = action.payload as string;\n        state.user = null;\n      })\n      .addCase(login.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.isSuccess = true;\n        state.user = action.payload as User;\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isError = true;\n        state.message = action.payload as string;\n        state.user = null;\n      })\n      .addCase(logout.fulfilled, (state) => {\n        state.user = null;\n      });\n  },\n});\n\nexport const { reset } = authSlice.actions;\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}